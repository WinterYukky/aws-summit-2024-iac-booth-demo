{
    "Stacks": [
        {
            "StackId": "arn:aws:cloudformation:us-east-1:288321069131:stack/CdkIlluminations/4700cd40-fd2b-11ee-ae2f-12537b3c4b27",
            "StackName": "CdkIlluminations",
            "ChangeSetId": "arn:aws:cloudformation:us-east-1:288321069131:changeSet/cdk-deploy-change-set/304bb8b6-daa8-4a5e-bafd-06e673394fbe",
            "Parameters": [
                {
                    "ParameterKey": "BootstrapVersion",
                    "ParameterValue": "/cdk-bootstrap/hnb659fds/version",
                    "ResolvedValue": "20"
                }
            ],
            "CreationTime": "2024-04-18T02:28:01.595000+00:00",
            "LastUpdatedTime": "2024-04-18T02:47:41.462000+00:00",
            "RollbackConfiguration": {},
            "StackStatus": "UPDATE_COMPLETE",
            "DisableRollback": false,
            "NotificationARNs": [],
            "Capabilities": [
                "CAPABILITY_IAM",
                "CAPABILITY_NAMED_IAM",
                "CAPABILITY_AUTO_EXPAND"
            ],
            "Outputs": [
                {
                    "OutputKey": "RestApiEndpoint0551178A",
                    "OutputValue": "https://oyuzuaglme.execute-api.us-east-1.amazonaws.com/prod/"
                },
                {
                    "OutputKey": "DistributionDomainName",
                    "OutputValue": "di5g15isadxy8.cloudfront.net"
                }
            ],
            "RoleARN": "arn:aws:iam::288321069131:role/cdk-hnb659fds-cfn-exec-role-288321069131-us-east-1",
            "Tags": [],
            "EnableTerminationProtection": false,
            "DriftInformation": {
                "StackDriftStatus": "NOT_CHECKED"
            }
        }
    ]
}

# スタックと各リソースのデプロイ状況を監視し、LED を点滅させる
from typing import Tuple
import serial
import time
import boto3

# 監視対象のスタック名
CDK_ILLUMINATIONS_STACK = 'CdkIlluminations'
BASE_STACK = 'BaseStack'

class Color:
    RED = (0, 255, 0)
    ORANGE = (165, 255, 0)
    YELLOW = (255, 165, 0)
    GREEN = (255, 0, 0)
    LIGHT_BLUE = (255, 0, 255)
    BLUE = (0, 0, 255)
    PURPLE = (0, 255, 255)
    WHITE = (255, 255, 255)
    BLACK = (0, 0, 0)

# LED 管理用の処理
# PORT = '/dev/cu.usbmodem1101'

# ser = serial.Serial(PORT, 9600)


def change_color(led_index: int, color: tuple):
    code = ','.join(map(str, [led_index, color[0], color[1], color[2]])) + '\n'
    # ser.write(bytes(code, 'utf-8'))
    dummy_change_color(code)
    time.sleep(0.11)


def dummy_change_color(code):
    '''
    LED に繋いでいない時用の処理
    '''
    #print("serial write:", code)
    pass


def turn_off_all_leds():
    '''
    全ての LED を消灯する
    '''

    # LED の個数
    LED_NUM = 10

    for i in range(LED_NUM):
        change_color(i, Color.BLACK)


def get_resource_status_color(resource: dict) -> Color:
    '''
    リソースを表す json を受け取り、ステータスに対応する LED カラーを返す
    '''
    # CloudFormation 上のステータスと色の対応関係 (割り当ては適当)
    resource_status_color_mapping = {
        'CREATE_COMPLETE': Color.BLUE,
        'CREATE_IN_PROGRESS': Color.GREEN,
        'CREATE_FAILED': Color.RED,
        'DELETE_COMPLETE': Color.BLACK,
        'DELETE_IN_PROGRESS': Color.ORANGE,
        'DELETE_FAILED': Color.RED,
    }

    # ResourceStatus が対応関係にあるものなら対応表を参照して Color を決定、そうでなければ WHITE を返しておく
    return resource_status_color_mapping.get(resource['ResourceStatus'], Color.WHITE)

def get_stack_status_color(stack_status: str) -> Color:
    '''
    スタックを表す json を受け取り、ステータスに対応する LED カラーを返す
    '''
    # CloudFormation 上のステータスと色の対応関係 (割り当ては適当)
    resource_status_color_mapping = {
        'CREATE_COMPLETE': Color.BLUE,
        'CREATE_IN_PROGRESS': Color.GREEN,
        'CREATE_FAILED': Color.RED,
        'UPDATE_COMPLETE': Color.BLUE,
        'UPDATE_IN_PROGRESS': Color.GREEN,
        'UPDATE_FAILED': Color.RED,
        'DELETE_COMPLETE': Color.BLACK,
        'DELETE_IN_PROGRESS': Color.ORANGE,
        'DELETE_FAILED': Color.RED,
    }

    # StackStatus が対応関係にあるものなら対応表を参照して Color を決定、そうでなければ WHITE を返しておく
    return resource_status_color_mapping.get(stack_status, Color.WHITE)

def get_stack_led_mapping(stack_name: str):
    stack_name_led_mapping = {
        CDK_ILLUMINATIONS_STACK: 9,
        BASE_STACK: 10,
    }

def is_target_resource(resource: dict) -> Tuple[bool, int]:
    '''
    リソースを表す json を受け取り、(監視対象のリソースか、そうならば何番目の LED に対応するか) を返す

    リソースの形式例
    {
        "LogicalResourceId": "DeploymentBucketC91A09DA",
        "PhysicalResourceId": "cdkilluminations-deploymentbucketc91a09da-m97w2za96d9b",
        "ResourceType": "AWS::S3::Bucket",
        "LastUpdatedTimestamp": "2024-04-18T02:28:37.518000+00:00",
        "ResourceStatus": "CREATE_COMPLETE",
        "DriftInformation": {
            "StackResourceDriftStatus": "NOT_CHECKED"
        }
    },
    '''

    # リソースと LED の対応関係
    # PhysicalResourceId の一意に識別可能な部分文字列と LED インデックスの組合せ
    resource_identifier_led_mapping = {
        's3deployment': 0,  # Custom::CDKBucketDeployment
        'ANY': 1,  # AWS::ApiGateway::Method
        'CdkIlluminationsReadFunction': 2,  # AWS::Lambda::Function
        'CdkIlluminationsTable': 3,  # AWS::DynamoDB::Table
        'loadbalancer': 4,  # AWS::ElasticLoadBalancingV2::LoadBalancer
        'CdkIlluminationsCluster/CdkIlluminationsService': 5,  # AWS::ECS::Service
        'CdkIlluminationsCluster': 6,  # AWS::ECS::Cluster
        # CloudFormation::Stack
    }

    resource_logical_id_led_mapping = {
        'Distribution': 7 # CloudFront::Distribution
    }

    resource_type_led_mapping = {
        'AWS::EC2::VPC': 8 # EC2::VPC
    }

    for identifier, led_index in resource_identifier_led_mapping.items():
        if 'PhysicalResourceId' not in resource:
            continue
        try:
            if identifier in resource['PhysicalResourceId']:
                return True, led_index
        except Exception as e:
            print(e, resource)

    for identifier, led_index in resource_logical_id_led_mapping.items():
        if 'LogicalResourceId' not in resource:
            continue
        try:
            if identifier in resource['LogicalResourceId']:
                return True, led_index
        except Exception as e:
            print(e, resource)

    for identifier, led_index in resource_type_led_mapping.items():
        if 'ResourceType' not in resource:
            continue
        try:
            if identifier == resource['ResourceType']:
                return True, led_index
        except Exception as e:
            print(e, resource)

    return False, -1

def apply_stack_resources_status(stack_name: str):
    '''
    指定したスタックのステータスを確認し、LED の色を変更する
    '''
    # スタック情報を取得
    try:
        response = cfn.describe_stacks(StackName=stack_name)
        target_stack = response['Stacks'][0]
        stack_status =  target_stack['StackStatus']
        led_color = get_stack_status_color(stack_status)
        print(f'StackName: {stack_name}, StackStatus: {stack_status}')
        led_index =
        # LED 状態を変更する
        change_color(led_index, led_color)

    except Exception as e:
        # スタックが存在しない場合
        print(f'スタックが存在しません: {e}')
        # 全ての LED を OFF にする
        # turn_off_all_leds()

    print('------------------')

def apply_stack_status(stack_name: str):

if __name__ == '__main__':
    cfn = boto3.client('cloudformation')

    # 定期的に処理を実行する
    while True:
        apply_stack_resources_status(BASE_STACK)
        apply_stack_resources_status(CDK_ILLUMINATIONS_STACK)
        # n 秒ごとに実行
        time.sleep(10)
